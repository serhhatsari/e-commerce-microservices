server:
  port: 8080

spring:
  application:
    name: payment-service

  profiles:
    active: ${SPRING_PROFILES_ACTIVE:local}

  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQLDialect

  datasource:
    url: ${SPRING_DATASOURCE_URL}
    username: ${SPRING_DATASOURCE_USERNAME}
    password: ${SPRING_DATASOURCE_PASSWORD}
    driver-class-name: com.mysql.cj.jdbc.Driver

  data:
    redis:
      host: ${REDIS_HOST}
      port: ${REDIS_PORT}
  cache:
    redis:
      time-to-live: 60000

  kafka:
    template:
      default-topic: ${KAFKA_TOPIC:payment-events}
    consumer:
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
          spring:
            json:
              type:
                mapping: order-event:com.serhat.paymentservice.model.event.OrderPlacedEvent
      bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS}
      group-id: ${KAFKA_GROUP_ID:payment-group}
    producer:
      properties:
       spring:
            json:
            type:
              mapping: payment-event:com.serhat.paymentservice.model.event.PaymentEvent
      bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS}
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer


springdoc:
  swagger-ui:
    path: /api/docs

management:
  endpoints:
    web:
      exposure:
        include: ["health", "metrics", "prometheus"]
    endpoint:
      metrics:
        enabled: true
      health:
        show-details: always
      prometheus:
        enabled: true
