version: "3.7"
services:
  # API Gateway
  api-gateaway:
    build: ./api-gateaway
    container_name: api-gateaway
    ports:
      - "8080:8080"
    depends_on:
      - order-service
      - product-service
      - payment-service
      - customer-service

  # Product Service
  product-service:
    build: ./product-service
    container_name: product-service
    ports:
    - "8081:8080"
    environment:
      SPRING_PROFILES_ACTIVE: local
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/productdb
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      REDIS_HOST: redis
      REDIS_PORT: 6379
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      KAFKA_TOPIC: order-events
      GROUP_ID: product-group
    depends_on:
      - postgres
      - redis
      - kafka

  # Order Service
  order-service:
    build: ./order-service
    container_name: order-service
    ports:
      - "8082:8080"
    environment:
      SPRING_PROFILES_ACTIVE: local
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/orderdb?createDatabaseIfNotExist=true&useSSL=false
      SPRING_DATASOURCE_USERNAME: dev
      SPRING_DATASOURCE_PASSWORD: dev
      REDIS_HOST: redis
      REDIS_PORT: 6379
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      KAFKA_TOPIC: order-events
    depends_on:
      - mysql
      - redis
      - kafka

  # Payment Service
  payment-service:
    build: ./payment-service
    container_name: payment-service
    ports:
    - "8083:8080"
    environment:
      SPRING_PROFILES_ACTIVE: local
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/paymentdb?createDatabaseIfNotExist=true&useSSL=false
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: root
      REDIS_HOST: redis
      REDIS_PORT: 6379
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      KAFKA_TOPIC: payment-events
      KAFKA_GROUP_ID: payment-group
    depends_on:
        - mysql
        - redis
        - kafka

  # Customer Service
  customer-service:
    build: ./customer-service
    container_name: customer-service
    ports:
    - "8084:8080"
    environment:
      SPRING_PROFILES_ACTIVE: local
      MONGO_URI: mongodb://mongo:27017
      REDIS_HOST: redis
      REDIS_PORT: 6379
    depends_on:
    - mongo
    - redis

  # Notification Service
  notification-service:
    build: ./notification-service
    container_name: notification-service
    ports:
    - "8085:8080"
    environment:
      SPRING_PROFILES_ACTIVE: local
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      KAFKA_TOPIC: payment-events
      KAFKA_GROUP_ID: payment-group
    depends_on:
    - kafka

  # Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_INTERNAL://localhost:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

  # Kafka UI
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - "9093:8080"
    links:
      - kafka
    depends_on:
      - kafka
    environment:
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092

  # Prometheus
  prometheus:
    container_name: prometheus
    image: prom/prometheus:v2.40.0
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml

  # Grafana
  grafana:
    container_name: grafana
    image: grafana/grafana-oss:latest
    ports:
      - "3000:3000"
    environment:
      GH_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource

  # Postgres
  postgres:
      image: postgres:latest
      container_name: postgres
      ports:
      - "5432:5432"
      environment:
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
        POSTGRES_DB: productdb

  # MySQL
  mysql:
    image: mysql:5.7
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: orderdb
      MYSQL_USER: dev
      MYSQL_PASSWORD: dev

  # MongoDB
  mongo:
      image: mongo:4.4.6
      container_name: mongo
      ports:
      - "27017:27017"
      environment:
        MONGO_INITDB_ROOT_USERNAME: root
        MONGO_INITDB_ROOT_PASSWORD: root
        MONGO_INITDB_DATABASE: customerdb

  # Redis Cache
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"

  # Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.6.2-amd64
    container_name: elasticsearch
    ports:
    - "9200:9200"
    - "9300:9300"
    environment:
    - discovery.type=single-node
    - cluster.name=elasticsearch
    - bootstrap.memory_lock=true
    - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    - xpack.security.enabled=false

  # Logstash
  logstash:
      image: docker.elastic.co/logstash/logstash:8.6.2-amd64
      container_name: logstash
      ports:
      - "5044:5044"
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
      volumes:
      - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
      - ./logstash/pipeline:/usr/share/logstash/pipeline:ro
      environment:
        LS_JAVA_OPTS: "-Xmx256m -Xms256m"
      depends_on:
      - elasticsearch

  # Kibana
  kibana:
        image: docker.elastic.co/kibana/kibana:8.6.2-amd64
        container_name: kibana
        ports:
        - "5601:5601"
        environment:
          ELASTICSEARCH_URL: http://elasticsearch:9200
          ELASTICSEARCH_HOSTS: '["http://elasticsearch:9200"]'
        depends_on:
        - elasticsearch